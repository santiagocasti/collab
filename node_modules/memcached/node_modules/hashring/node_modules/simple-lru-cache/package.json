{
  "name": "simple-lru-cache",
  "version": "0.0.1",
  "author": {
    "name": "Gabriel Eisbruch"
  },
  "description": "node-simple-lru-cache =====================",
  "main": "index",
  "keywords": [
    "cache",
    "lru",
    "simple",
    "fast"
  ],
  "directories": {
    "lib": "./lib"
  },
  "maintainers": [
    {
      "name": "Gabriel Eisbruch",
      "email": "gabrieleisbruch@gmail.com",
      "url": "http://www.mercadolibre.com"
    }
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/mercadolibre/node-simple-lru-cache/blob/master/LICENSE"
    }
  ],
  "repositories": [
    {
      "type": "git",
      "url": "http://github.com/mercadolibre/node-simple-lru-cache.git"
    }
  ],
  "dependencies": {},
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "scripts": {
    "test": "make test",
    "bench": "make bench"
  },
  "readme": "node-simple-lru-cache\n=====================\n\nIt's a very simple and extremely fast lru cache for node.js.\n\nThis cache will priorize the lastest used keys over the least used keys, \nso when a new key is added if the cache is full, the least used key will be removed\n\n## Instalation\n    \n    npm install simple-lru-cache\n\n## Usage\n    var SimpleCache = require(\"simple-lru-cache\")\n\n    var cache = new SimpleCache({\"maxSize\":1000})\n\n    //Add an Objet\n    cache.set(\"hello\",\"world\")\n\n    //Get an Object\n    cache.get(\"hello\")\n\n    //Delete an Object\n    cache.del(\"hello\")\n\n    //Reset cache\n    cache.reset()\n\n## Tests\n    \n    npm install\n    npm test\n\n## Benchmark against lru-cache\n\n      make bench\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "http://github.com/mercadolibre/node-simple-lru-cache.git"
  },
  "bugs": {
    "url": "https://github.com/mercadolibre/node-simple-lru-cache/issues"
  },
  "_id": "simple-lru-cache@0.0.1",
  "_from": "simple-lru-cache@0.0.x"
}
